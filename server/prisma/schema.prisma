generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

// model User {
//   id    String     @id @default(uuid())
//   email String  @unique
//   name  String?
//   posts Post[]
// }

// model Post {
//   id        String     @id @default(uuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   title     String
//   content   String?
//   published Boolean  @default(false)
//   viewCount Int      @default(0)
//   author    User?    @relation(fields: [authorId], references: [id])
//   authorId  String?
// }

// Define the data model for the database tables

// Conference table
// model Conference {
//   id        String      @id @default(uuid())
//   name      String
//   location  String
//   startDate DateTime
//   endDate   DateTime
//   users User[]
//   weather Weather?
// }

// // Define JWT token model for authentication

// enum Status {
//   attendee
//   speaker
// }


// model User {
//   id       String      @id @default(uuid())
//   username String   @unique
//   password String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   conferences Conference[]
//   bio       String
//   status    Status
// }

// // Define data model for storing weather data

// model Weather {
//   id          String      @id @default(uuid())
//   conference  Conference @relation(fields: [conferenceId], references: [id])
//   conferenceId String @unique
//   temperature Float
//   description String
// }


// Define the model for conferences
model Conference {
  id            String         @id @default(uuid())
  name          String
  location      String
  startDate     DateTime
  endDate       DateTime
  conferenceUsers ConferenceUser[] // Define a one-to-many relationship with ConferenceUser
  weather       Weather?
  creator       User          @relation(fields: [creatorId], references: [id])
  creatorId     String
  description   String
}

// Define the model for users
model User {
  id            String         @id @default(uuid())
  username      String         @unique
  email         String?
  password      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  conferenceUsers ConferenceUser[] // Define a one-to-many relationship with ConferenceUser
  bio           String?
  conferences   Conference[]
}

// Define an enum for user status
enum Status {
  attendee
  speaker
}

// Define the model for storing weather data
model Weather {
  id             String      @id @default(uuid())
  conference     Conference @relation(fields: [conferenceId], references: [id])
  conferenceId   String      @unique
  temperature    Float
  description    String
}

// Define the model for the conference and user relationship
// This model represents the many-to-one relationship between conferences and users
model ConferenceUser {
  id            String      @id @default(uuid())
  conference    Conference  @relation(fields: [conferenceId], references: [id]) // Define a many-to-one relationship with Conference
  conferenceId  String
  user          User        @relation(fields: [userId], references: [id]) // Define a many-to-one relationship with User
  userId        String
  role          Status      // Define a field for the user's role in the conference
}

